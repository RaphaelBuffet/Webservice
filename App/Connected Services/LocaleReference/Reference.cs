//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.LocaleReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LocaleReference.ISoapPrinterService")]
    public interface ISoapPrinterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/addCHFByUID", ReplyAction="http://tempuri.org/ISoapPrinterService/addCHFByUIDResponse")]
        double addCHFByUID(int idUser, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/addCHFByUID", ReplyAction="http://tempuri.org/ISoapPrinterService/addCHFByUIDResponse")]
        System.Threading.Tasks.Task<double> addCHFByUIDAsync(int idUser, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/getUsernameByCardID", ReplyAction="http://tempuri.org/ISoapPrinterService/getUsernameByCardIDResponse")]
        string getUsernameByCardID(int cardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/getUsernameByCardID", ReplyAction="http://tempuri.org/ISoapPrinterService/getUsernameByCardIDResponse")]
        System.Threading.Tasks.Task<string> getUsernameByCardIDAsync(int cardId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/addQuotaByUsername", ReplyAction="http://tempuri.org/ISoapPrinterService/addQuotaByUsernameResponse")]
        double addQuotaByUsername(string Username, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/addQuotaByUsername", ReplyAction="http://tempuri.org/ISoapPrinterService/addQuotaByUsernameResponse")]
        System.Threading.Tasks.Task<double> addQuotaByUsernameAsync(string Username, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/convertCHFToQuota", ReplyAction="http://tempuri.org/ISoapPrinterService/convertCHFToQuotaResponse")]
        decimal convertCHFToQuota(decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/convertCHFToQuota", ReplyAction="http://tempuri.org/ISoapPrinterService/convertCHFToQuotaResponse")]
        System.Threading.Tasks.Task<decimal> convertCHFToQuotaAsync(decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/convertQuotaToCHF", ReplyAction="http://tempuri.org/ISoapPrinterService/convertQuotaToCHFResponse")]
        decimal convertQuotaToCHF(decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/convertQuotaToCHF", ReplyAction="http://tempuri.org/ISoapPrinterService/convertQuotaToCHFResponse")]
        System.Threading.Tasks.Task<decimal> convertQuotaToCHFAsync(decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/addCHFByUsername", ReplyAction="http://tempuri.org/ISoapPrinterService/addCHFByUsernameResponse")]
        double addCHFByUsername(string name, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/addCHFByUsername", ReplyAction="http://tempuri.org/ISoapPrinterService/addCHFByUsernameResponse")]
        System.Threading.Tasks.Task<double> addCHFByUsernameAsync(string name, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/getUserAccount", ReplyAction="http://tempuri.org/ISoapPrinterService/getUserAccountResponse")]
        DTO.User getUserAccount(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoapPrinterService/getUserAccount", ReplyAction="http://tempuri.org/ISoapPrinterService/getUserAccountResponse")]
        System.Threading.Tasks.Task<DTO.User> getUserAccountAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoapPrinterServiceChannel : App.LocaleReference.ISoapPrinterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoapPrinterServiceClient : System.ServiceModel.ClientBase<App.LocaleReference.ISoapPrinterService>, App.LocaleReference.ISoapPrinterService {
        
        public SoapPrinterServiceClient() {
        }
        
        public SoapPrinterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SoapPrinterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapPrinterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapPrinterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double addCHFByUID(int idUser, decimal amount) {
            return base.Channel.addCHFByUID(idUser, amount);
        }
        
        public System.Threading.Tasks.Task<double> addCHFByUIDAsync(int idUser, decimal amount) {
            return base.Channel.addCHFByUIDAsync(idUser, amount);
        }
        
        public string getUsernameByCardID(int cardId) {
            return base.Channel.getUsernameByCardID(cardId);
        }
        
        public System.Threading.Tasks.Task<string> getUsernameByCardIDAsync(int cardId) {
            return base.Channel.getUsernameByCardIDAsync(cardId);
        }
        
        public double addQuotaByUsername(string Username, decimal amount) {
            return base.Channel.addQuotaByUsername(Username, amount);
        }
        
        public System.Threading.Tasks.Task<double> addQuotaByUsernameAsync(string Username, decimal amount) {
            return base.Channel.addQuotaByUsernameAsync(Username, amount);
        }
        
        public decimal convertCHFToQuota(decimal amount) {
            return base.Channel.convertCHFToQuota(amount);
        }
        
        public System.Threading.Tasks.Task<decimal> convertCHFToQuotaAsync(decimal amount) {
            return base.Channel.convertCHFToQuotaAsync(amount);
        }
        
        public decimal convertQuotaToCHF(decimal amount) {
            return base.Channel.convertQuotaToCHF(amount);
        }
        
        public System.Threading.Tasks.Task<decimal> convertQuotaToCHFAsync(decimal amount) {
            return base.Channel.convertQuotaToCHFAsync(amount);
        }
        
        public double addCHFByUsername(string name, decimal amount) {
            return base.Channel.addCHFByUsername(name, amount);
        }
        
        public System.Threading.Tasks.Task<double> addCHFByUsernameAsync(string name, decimal amount) {
            return base.Channel.addCHFByUsernameAsync(name, amount);
        }
        
        public DTO.User getUserAccount(string name) {
            return base.Channel.getUserAccount(name);
        }
        
        public System.Threading.Tasks.Task<DTO.User> getUserAccountAsync(string name) {
            return base.Channel.getUserAccountAsync(name);
        }
    }
}
